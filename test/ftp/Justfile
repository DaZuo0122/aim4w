# Use $0 as recipe name in tests

set positional-arguments := true

default:
    @just --list

tool := "vsftp_alpine"
docker_container_registry := "docker.pkg.github.com"
docker_user_repo := "mihaigalos/docker"
docker_image_version := "latest"
docker_image := docker_container_registry + "/" + docker_user_repo + "/" + tool + ":" + docker_image_version
server_port := "21"

build +args="":
    docker build {{ args }} --network=host -t {{ docker_image }} .

_start dirname="." +args="-d":
    #!/bin/bash
    source ../common.sh
    echo "machine 127.0.0.1 login user password pass port {{ server_port }}" > {{ dirname }}/.netrc.test_ftp
    docker run {{ args }} \
        -it \
        --rm \
        --name aim_tests_ftp \
        -e PASV_ADDRESS=127.0.0.1 \
        -e PASV_MIN_PORT=21100 \
        -e PASV_MAX_PORT=21110 \
        -v $(pwd):/src \
        -p {{ server_port }}:21 \
        -p 20:20 \
        -p 21100-21110:21100-21110 \
        {{ docker_image }} > /dev/null \
    && wait_docker "aim_tests_ftp" \
    || true

_stop dirname=".":
    @rm {{ dirname }}/.netrc.test_ftp || true
    @docker stop -t 1 aim_tests_ftp > /dev/null 2>&1
    @docker rm --force aim_tests_ftp > /dev/null 2>&1

test: _start && _stop
    #!/bin/bash

    source ../common.sh
    highlight "\nRunning tests in $PWD\n\n"
    for test in $(grep ^_test_ Justfile | cut -d':' -f1);
    do
        highlight "$test "
        just $test && true || err "Stopping."
    done

_test_sanity:
    #!/bin/bash
    source ../common.sh
    [[ $(which aim) =~ "target/debug" ]] && ok || err "Please ensure aim not in PATH for testing"

_test_curl_login:
    #!/bin/bash
    source ../common.sh
    response=$(curl -s -w "%{http_code}" "ftp://127.0.0.1:21/" --user "user:pass" | tail -1)
    [ $response = "226" ] && ok || err "ERROR: Response code $response."

_test_curl_login_with_netrc:
    #!/bin/bash
    source ../common.sh
    response=$(curl -s --netrc-file .netrc.test_ftp -w "%{http_code}" "ftp://localhost:21/" --user "user:pass" | tail -1)
    [ $response = "226" ] && ok || err "ERROR: Response code $response."

_test_aim_checksum_works:
    #!/bin/bash
    test=$(basename $0) && source ../common.sh
    sha_expected="cc7e91ef8d68d0c0e06857e0713e490d4cead4164f99c9dc1a59c3e93e217a6d"
    aim -s binary_file.tar.gz ftp://user:pass@127.0.0.1:21/$test
    aim -s ftp://user:pass@127.0.0.1:21/$test $test $sha_expected
    [ $? -eq 0 ] && ok || err "ERROR: expected and actual SHA256s don't match."
    rm $test

_test_aim_checksum_fails_when_checksum_mismatch:
    #!/bin/bash
    test=$(basename $0) && source ../common.sh
    sha_expected="AAAA0d7139c8c7e3ff20cb243e94bc5993517d88e8be8d59129730607d5c631b"
    aim -s binary_file.tar.gz ftp://user:pass@127.0.0.1:21/$test
    aim -s ftp://user:pass@127.0.0.1:21/$test $test $sha_expected
    [ $? -ne 0 ] && ok || err "ERROR: expected checksum mismatch, got equal."
    rm $test

_test_aim_put_binary_file:
    #!/bin/bash
    test=$(basename $0) && source ../common.sh
    sha_input=$(sha256sum binary_file.tar.gz | cut -d' ' -f1)
    aim -s binary_file.tar.gz ftp://user:pass@127.0.0.1:21/$test
    aim -s ftp://user:pass@127.0.0.1:21/$test $test
    sha_output=$(sha256sum $test | cut -d' ' -f1)
    [ "$sha_input" = "$sha_output" ] && ok || err "ERROR: input and output SHA256s don't match."
    rm $test

_test_aim_put_resume_binary_file:
    #!/bin/bash
    test=$(basename $0) && source ../common.sh
    sha_input=$(sha256sum binary_file.tar.gz | cut -d' ' -f1)
    aim -s binary_file.tar.gz.part1 ftp://user:pass@127.0.0.1:21/$test.tar.gz
    aim -s binary_file.tar.gz ftp://user:pass@127.0.0.1:21/$test.tar.gz
    aim -s ftp://user:pass@127.0.0.1:21/$test.tar.gz $test
    sha_output=$(sha256sum $test | cut -d' ' -f1)
    [ "$sha_input" = "$sha_output" ] && ok || err "ERROR: input and output SHA256s don't match."
    rm $test

_test_aim_get_with_netrc:
    #!/bin/bash
    test=$(basename $0) && source ../common.sh
    sha_input=$(sha256sum binary_file.tar.gz | cut -d' ' -f1)
    aim -s binary_file.tar.gz ftp://127.0.0.1:21/$test
    aim -s ftp://127.0.0.1:21/$test $test
    sha_output=$(sha256sum $test | cut -d' ' -f1)
    [ "$sha_input" = "$sha_output" ] && ok || err "ERROR: input and output SHA256s don't match."
    rm $test
